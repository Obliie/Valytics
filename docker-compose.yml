version: '3.8'
name: valytics
services:
  ###
  # Service Containers
  ###
  riot-ingest:
    build:
      context: ./
      dockerfile: ./services/riot-ingest/Dockerfile
    env_file:
      - .env
    depends_on:
      proto-builder:
        condition: service_completed_successfully
    volumes:
      - ./services/common/src/main:/service_common
      - ./services/riot-ingest/src/main:/service
      - ./protobufs/build/python:/protobufs
    command: watchmedo auto-restart --recursive --pattern="*.py" --directory="/service/" --directory="/service_common/" --directory="/protobufs/" python3 /service/service.py
    profiles:
      - backend
    networks:
      - valyticsmesh
    secrets:
      - riot-api-key

  match:
    build:
      context: ./
      dockerfile: ./services/match/Dockerfile
    env_file:
      - .env
    depends_on:
      proto-builder:
        condition: service_completed_successfully
      riot-ingest:
        condition: service_started
      ranked-match-db:
        condition: service_started
    volumes:
      - ./services/common/src/main:/service_common
      - ./services/match/src/main:/service
      - ./protobufs/build/python:/protobufs
    command: watchmedo auto-restart --recursive --pattern="*.py" --directory="/service/" --directory="/service_common/" --directory="/protobufs/" python3 /service/service.py
    profiles:
      - backend
    networks:
      - valyticsmesh
    configs:
      - service-config
    secrets:
      - mongo-root-username
      - mongo-root-password

  ###
  # Databases
  ###
  ranked-match-db:
    image: mongo:7.0.4
    environment:
      MONGO_INITDB_ROOT_USERNAME_FILE: /run/secrets/mongo-root-username
      MONGO_INITDB_ROOT_PASSWORD_FILE: /run/secrets/mongo-root-password
      MONGO_INITDB_DATABASE: admin
      MONGO_USERNAME_FILE: /run/secrets/mongo-username
      MONGO_PASSWORD_FILE: /run/secrets/mongo-password
      MONGO_DATABASE: ranked-match

    command: mongod --port ${RANKED_MATCH_DB_PORT}

    profiles:
      - backend
    networks:
      - valyticsmesh
    secrets:
      - mongo-root-username
      - mongo-root-password
      - mongo-username
      - mongo-password

  ###
  # Build Containers
  ###
  proto-builder:
    build:
      context: ./
      dockerfile: ./containers/proto-builder/Dockerfile
    env_file:
      - .env
    volumes:
      - ./protobufs:/protobufs
    working_dir: /protobufs
    command: generate --template /etc/buf/buf.gen.yaml
    profiles: ['build', 'backend']

  ###
  # Test Containers
  ###
  integration:
    build:
      context: ./
      dockerfile: ./containers/integration-test/Dockerfile
    env_file:
      - .env
    volumes:
      - ./services/common/src/test:/tests/common
      - ./services/match/src/test:/tests/match
      - ./services/riot-ingest/src/test:/tests/riot-ingest
      - ./protobufs/build/python:/protobufs
      - ./services/common/src/main:/service_common
    command: pytest /tests
    profiles:
      - test
    networks:
      - valyticsmesh

  ###
  # Envoy and API stats
  ###
  api-gateway:
    build:
      context: ./
      dockerfile: ./containers/api-gateway/Dockerfile
      args:
        RIOT_INGEST_SERVICE_PORT: ${RIOT_INGEST_SERVICE_PORT}
        MATCH_SERVICE_PORT: ${MATCH_SERVICE_PORT}
    env_file:
      - .env
    depends_on:
      riot-ingest:
        condition: service_started
      match:
        condition: service_started
      statsd-exporter:
        condition: service_started
    command: /usr/local/bin/envoy -c /etc/envoy/envoy.json -l trace --log-path /tmp/envoy-info.log
    profiles:
      - backend
    ports:
      - ${HOST}:${ENVOY_EDGE_GATEWAY_PORT}:8080
    networks:
      - valyticsmesh

  statsd-exporter:
    image: prom/statsd-exporter:latest
    profiles:
      - backend
    networks:
      - valyticsmesh

  prometheus:
    build:
      context: ./
      dockerfile: ./containers/prometheus/Dockerfile
    depends_on:
      statsd-exporter:
        condition: service_started
    command: '--config.file=/etc/prometheus/prometheus.yaml'
    profiles:
      - backend
    ports:
      - ${HOST}:${PROMETHEUS_PORT}:9090
    networks:
      - valyticsmesh

  mockserver:
    build:
      context: ./
      dockerfile: ./containers/etc/mock-server/Dockerfile
    profiles:
      - backend
    networks:
      - valyticsmesh

networks:
  valyticsmesh:
    driver: bridge
    name: valyticsmesh

configs:
  service-config:
    file: ./config.yaml

secrets:
  riot-api-key:
    file: ./secrets/riot_api_key
  mongo-root-username:
    file: ./secrets/mongo_root_username
  mongo-root-password:
    file: ./secrets/mongo_root_password
  mongo-username:
    file: ./secrets/mongo_username
  mongo-password:
    file: ./secrets/mongo_password
