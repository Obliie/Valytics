version: '3.8'
name: valytics
services:
  ###
  # Service Containers
  ###
  riot-ingest:
    build:
      context: ./
      dockerfile: ./services/riot-ingest/Dockerfile
    env_file:
      - .env
    depends_on:
      - proto-builder
    volumes:
      - ./services/common/src/main:/service_common
      - ./services/riot-ingest/src/main:/service
      - ./protobufs/build/python:/protobufs
    command: watchmedo auto-restart --recursive --pattern="*.py" --directory="/service/" --directory="/service_common/" --directory="/protobufs/" python3 /service/service.py
    profiles:
      - backend
    networks:
      - valyticsmesh

  match:
    build:
      context: ./
      dockerfile: ./services/match/Dockerfile
    env_file:
      - .env
    depends_on:
      - proto-builder
      - riot-ingest
      - ranked-match-db
    volumes:
      - ./services/common/src/main:/service_common
      - ./services/match/src/main:/service
      - ./protobufs/build/python:/protobufs
    command: watchmedo auto-restart --recursive --pattern="*.py" --directory="/service/" --directory="/service_common/" --directory="/protobufs/" python3 /service/service.py
    profiles:
      - backend
    networks:
      - valyticsmesh

  ###
  # Databases
  ###
  ranked-match-db:
    image: mongo:5.0.19
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${RANKED_MATCH_DB_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${RANKED_MATCH_DB_PASS}
    command: --port ${RANKED_MATCH_DB_PORT}
    profiles:
      - backend
    networks:
      - valyticsmesh

  ###
  # Build Containers
  ###
  proto-builder:
    build:
      context: ./
      dockerfile: ./containers/proto-builder/Dockerfile
    env_file:
      - .env
    volumes:
      - ./protobufs:/protobufs
    working_dir: /protobufs
    command: generate --template /etc/buf/buf.gen.yaml
    profiles: ['build', 'backend']

  ###
  # Test Containers
  ###
  integration:
    build:
      context: ./
      dockerfile: ./containers/integration-test/Dockerfile
    env_file:
      - .env
    depends_on:
      - proto-builder
    volumes:
      - ./services/common/src/test:/tests/common
      - ./services/match/src/test:/tests/match
      - ./services/riot-ingest/src/test:/tests/riot-ingest
      - ./protobufs/build/python:/protobufs
    command: pytest /tests
    profiles:
      - test
    networks:
      - valyticsmesh

  ###
  # Envoy and API stats
  ###
  api-gateway:
    build:
      context: ./
      dockerfile: ./containers/api-gateway/Dockerfile
      args:
        RIOT_INGEST_SERVICE_PORT: ${RIOT_INGEST_SERVICE_PORT}
        MATCH_SERVICE_PORT: ${MATCH_SERVICE_PORT}
    env_file:
      - .env
    depends_on:
      - riot-ingest
      - match
      - statsd-exporter
    command: /usr/local/bin/envoy -c /etc/envoy/envoy.json -l trace --log-path /tmp/envoy-info.log
    profiles:
      - backend
    ports:
      - ${HOST}:${ENVOY_EDGE_GATEWAY_PORT}:8080
      - ${HOST}:${ENVOY_EDGE_GATEWAY_ADMIN_PORT}:9090
    networks:
      - valyticsmesh

  statsd-exporter:
    image: prom/statsd-exporter:latest
    profiles:
      - backend
    networks:
      - valyticsmesh

  prometheus:
    build:
      context: ./
      dockerfile: ./containers/prometheus/Dockerfile
    depends_on:
      - statsd-exporter
    command: '--config.file=/etc/prometheus/prometheus.yaml'
    profiles:
      - backend
    ports:
      - ${HOST}:${PROMETHEUS_PORT}:9090
    networks:
      - valyticsmesh

networks:
  valyticsmesh:
    driver: bridge
    name: valyticsmesh
