syntax = "proto3";
package protobufs.services.v1;
import "common/v1/match.proto";

/*
 * Riot Ingest service
 * This service provides various RPC methods to retrieve data related to Riot Games.
*/
service RiotIngestService {
    // Used to get matchdata information based on a matchid.
    rpc GetMatchData(GetMatchDataRequest) returns (GetMatchDataResponse) {}

    // Used to get puuid data based on a game name and tagline.
    rpc GetAccountByRiotID(GetAccountByRiotIDRequest) returns (GetAccountByRiotIDResponse) {}

    // Used to obtain a list of matches related to a specific player.
    rpc GetPlayerMatches(GetPlayerMatchesRequest) returns (GetPlayerMatchesResponse) {}

    // Used to fetch content-related data, which might include assets, updates, or other information.
    rpc GetContentData(GetContentDataRequest) returns (GetContentDataResponse) {}

    // Used to get data related to leaderboards, possibly for competitive rankings.
    rpc GetLeaderboardData(GetLeaderboardDataRequest) returns (GetLeaderboardDataResponse) {}
}

/*
 * ACCOUNT-V1 (/riot/account/v1/accounts/by-riot-id/{gameName}/{tagLine})
 * Used to get puuid based on a game name and tagline.
*/
message GetAccountByRiotIDRequest {
    string game_name = 1;
    string tag_line = 2;
}

message GetAccountByRiotIDResponse {
    string puuid = 1;
}

/*
 * VAL-MATCH-V1 (/val/match/v1/matchlists/by-puuid/{puuid})
 * Uses puuid to obtain a list which contains other lists that specify a matchid, queueid, and gameStartTimeMillis.
 */
message GetPlayerMatchesRequest {
    string puuid = 1;
}

message PlayersMatches {
  string match_id = 1;
  uint64 game_start_time = 2;
  string queue_id = 3;
}

message GetPlayerMatchesResponse {
    repeated PlayersMatches history = 1;
}

/*
 * VAL-CONTENT-V1 (/val/content/v1/contents)
 * Used to fetch content-related data, which might include assets, updates, or other information.
*/

message GetContentDataRequest {}

message Languages {
    string arabic = 1;
    string german = 2;
    string english = 3;
    string spanish_spain = 4;
    string spanish_mexico = 5;
    string french = 6;
    string indonesian = 7;
    string italian = 8;
    string japanese = 9;
    string korean = 10;
    string polish = 11;
    string portuguese_brazil = 12;
    string russian = 13;
    string thai = 14;
    string turkish = 15;
    string vietnamese = 16;
    string chinese_simplified = 17;
    string chinese_traditional = 18;
  }

message GameData {
    string name = 1;
    Languages localized_names  = 2;
    string character_id = 3;
    string asset_name = 4;
}

message GameModesData {
    string name = 1;
    Languages localized_names  = 2;
    string character_id = 3;
    string asset_name = 4;
    string asset_path = 5;
}

message ActsData {
    string character_id = 1;
    string parent_id = 2;
    string type = 3;
    string name = 4;
    Languages localized_names  = 5;
    string is_active = 6;
}

message GetContentDataResponse {
    string version = 1;
    repeated GameData characters_info = 2;
    repeated GameData maps_info = 3;
    repeated GameData chromas_info = 4;
    repeated GameData skins_info = 5;
    repeated GameData skin_levels_info = 6;
    repeated GameData equips_info = 7;
    repeated GameModesData game_modes_info = 8;
    repeated GameData sprays_info = 9;
    repeated GameData spray_levels_info = 10;
    repeated GameData charms_info = 11;
    repeated GameData charm_levels_info = 12;
    repeated GameData player_cards_info = 13;
    repeated GameData player_titles_info = 14;
    repeated ActsData acts_info = 15;
    repeated GameData ceremonies_info = 16;
}

/*
 * VAL-RANKED-V1 (/val/ranked/v1/leaderboards/by-act/{actId})
 * Used to get data related to leaderboards, possibly for competitive rankings.
*/

// buf:lint:ignore ENUM_VALUE_PREFIX
// buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
enum ActId {
    CLOSED_BETA_ACT_1 = 0;
    CLOSED_BETA_ACT_2 = 1;
    CLOSED_BETA_ACT_3 = 2;
    EPISODE_1_ACT_1 = 3;
    EPISODE_1_ACT_2 = 4;
    EPISODE_1_ACT_3 = 5;
    EPISODE_2_ACT_1 = 6;
    EPISODE_2_ACT_2 = 7;
    EPISODE_2_ACT_3 = 8;
    EPISODE_3_ACT_1 = 9;
    EPISODE_3_ACT_2 = 10;
    EPISODE_3_ACT_3 = 11;
    EPISODE_4_ACT_1 = 12;
    EPISODE_4_ACT_2 = 13;
    EPISODE_4_ACT_3 = 14;
    EPISODE_5_ACT_1 = 15;
    EPISODE_5_ACT_2 = 16;
    EPISODE_5_ACT_3 = 17;
    EPISODE_6_ACT_1 = 18;
    EPISODE_6_ACT_2 = 19;
    EPISODE_6_ACT_3 = 20;
    EPISODE_7_ACT_1 = 21;
  }

// buf:lint:ignore ENUM_VALUE_PREFIX
// buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
enum Shard {
    NA = 0;
    LATAM = 1;
    BR = 2;
    EU = 3;
    AP = 4;
    KR = 5;
}

message GetLeaderboardDataRequest {
    ActId act_id = 1;
}
message PlayerDto {
    string puuid = 1;
    string game_name = 2;
    string tag_line = 3;
    uint64 leaderboard_rank = 4;
    uint64 ranked_rating = 5;
    uint64 number_of_wins = 6;
}
message GetLeaderboardDataResponse {
    Shard shard = 2;
    uint64 total_players = 3;
    repeated PlayerDto players = 4;
}

message GetMatchDataRequest {
    string match_id = 1;
}

message GetMatchDataResponse {
    common.v1.Match match = 1;
}
